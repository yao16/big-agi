// noinspection ExceptionCaughtLocallyJS

import { TRPCError } from '@trpc/server';
import { z } from 'zod';

import { createTRPCRouter, publicProcedure } from '~/modules/trpc/trpc.server';

import { PasteGG } from './pastegg.types';


const inputSchema = z.object({
  to: z.enum(['paste.gg']),
  title: z.string(),
  fileContent: z.string(),
  fileName: z.string(),
  origin: z.string(),
});

const outputSuccessSchema = z.object({
  url: z.string(),
  expires: z.string(),
  deletionKey: z.string(),
  created: z.string(),
});

export type PublishedSchema = z.infer<typeof outputSuccessSchema>;


export const publishRouter = createTRPCRouter({

  /**
   * Publish a file (with title, content, name) to a sharing service
   *
   * For now only 'paste.gg' is supported
   */
  publish: publicProcedure
    .input(inputSchema)
    .output(outputSuccessSchema)
    .mutation(async ({ input }) => {

      const { to, title, fileContent, fileName, origin } = input;
      if (to !== 'paste.gg' || !title || !fileContent || !fileName)
        throw new Error('Invalid options');

      const paste = await postToPasteGGOrThrow(title, fileName, fileContent, origin);
      if (paste?.status !== 'success')
        throw new TRPCError({
          code: 'BAD_REQUEST',
          message: `${paste?.error || 'Unknown error'}. ${paste?.message || 'Unknown cause'}`.trim(),
        });

      const result = paste.result;
      return {
        url: `https://paste.gg/${result.id}`,
        expires: result.expires || 'never',
        deletionKey: result.deletion_key || 'none',
        created: result.created_at,
      };
    }),

});


/**
 * Post a paste to paste.gg
 * [called by the API]
 *  - API description: https://github.com/ascclemens/paste/blob/master/api.md
 *
 * @param title Title of the paste
 * @param fileName File with extension, e.g. 'conversation.md'
 * @param fileContent Textual content (e.g. markdown text)
 * @param origin the URL of the page that generated the paste
 * @param expireDays Number of days after which the paste will expire (0 = never expires, default = 30)
 */
async function postToPasteGGOrThrow(title: string, fileName: string, fileContent: string, origin: string, expireDays: number = 30): Promise<PasteGG.Wire.PasteResponse> {

  // Default: expire in 30 days
  let expires = null;
  if (expireDays && expireDays >= 1) {
    const expirationDate = new Date();
    expirationDate.setDate(expirationDate.getDate() + expireDays);
    expires = expirationDate.toISOString();
  }

  const pasteData: PasteGG.Wire.PasteRequest = {
    name: title,
    description: `Generated by ${origin} ðŸš€`,
    visibility: 'unlisted',
    ...(expires && { expires }),
    files: [{
      name: fileName,
      content: {
        format: 'text',
        value: fileContent,
      },
    }],
  };

  const response = await fetch('https://api.paste.gg/v1/pastes', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(pasteData),
  });

  if (response.ok)
    return await response.json();

  console.error(`Failed to create paste: ${response.status}`, response.statusText);
  const errorResponse = await response.json();
  throw new TRPCError({
    code: 'BAD_REQUEST',
    message: `Failed to create paste: ${response.statusText}. ${errorResponse?.error || 'Cause'}: ${errorResponse?.message || 'unknown'}.`,
  });
}